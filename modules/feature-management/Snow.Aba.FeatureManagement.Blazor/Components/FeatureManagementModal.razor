@using Volo.Abp.Validation.StringValues
@using Microsoft.Extensions.Localization
@inherits AbaFeatureManagementComponentBase
<Modal Title="@L["Features"]"
       Visible="@ShowModal"
       ConfirmLoading="@ModalConfirmLoading"
       OnOk="SaveAsync"
       OnCancel="@CloseModal">
    @if (Groups == null || !Groups.Any())
    {
        <span>@L["NoFeatureFoundMessage"]</span>
    }
    else
    {
        <Tabs @bind-ActiveKey="@SelectedTabName" Animated TabPosition="TabPosition.Left">
            @foreach (var group in Groups)
            {
                <TabPane Tab="@group.DisplayName" Key="@GetNormalizedGroupName(group.Name)">
                    <h4>@group.DisplayName</h4>
                    <hr class="mt-2 mb-3" />

                    @foreach (var feature in group.Features)
                    {
                        var disabled = IsDisabled(feature.Provider.Name);

                        if (feature.ValueType is FreeTextStringValueType)
                        {
                            <div Style="@GetFeatureStyles(feature)">
                                <Input Disabled="@disabled" Style="@GetFeatureStyles(feature)" @bind-Value="@feature.Value" OnChange="@(async(string v) => await OnFeatureValueChangedAsync(v, feature))" />
                                @if (feature.Description != null)
                                {
                                    <span>@feature.Description</span>
                                }
                            </div>
                        }

                        if (feature.ValueType is SelectionStringValueType)
                        {
                            var items = ((SelectionStringValueType)feature.ValueType).ItemSource.Items;
                            <div Style="@GetFeatureStyles(feature)">
                                <SimpleSelect @bind-Value="@SelectionStringValues[feature.Name]" Style="width:120px;">
                                    <SelectOptions>
                                        @foreach (var item in items)
                                        {
                                            <SimpleSelectOption Value="@item.Value" Label="@CreateStringLocalizer(item.DisplayText.ResourceName).GetString(item.DisplayText.Name)"></SimpleSelectOption>
                                        }
                                    </SelectOptions>
                                </SimpleSelect>
                            </div>
                        }

                        if (feature.ValueType is ToggleStringValueType)
                        {
                            <div Style="@GetFeatureStyles(feature)">
                                <Checkbox @bind-Value="@ToggleValues[feature.Name]" Style="@GetFeatureStyles(feature)" CheckedChanged="@(async(v) => await OnSelectedValueChangedAsync(v, feature))">@feature.DisplayName</Checkbox>
                            </div>
                        }
                    }

                </TabPane>
            }
        </Tabs>
    }
</Modal>